import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram import F

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(
    token="7824254637:AAGS3Nv6T4P0je9Ek24J_VUz2vLN9uEOG40",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SteamID32


def get_steam_id32(input_str):
    if input_str.isdigit():
        return int(input_str)
    elif "steamcommunity.com" in input_str:
        parts = input_str.split('/')
        for part in parts:
            if part.startswith('7656') and len(part) == 17:
                steamid64 = int(part)
                return steamid64 - 76561197960265728
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dota 2.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
        "‚Ä¢ SteamID32 (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>123456789</code>)\n"
        "‚Ä¢ SteamID64 (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>76561197960265728</code>)\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_input(message: types.Message):
    user_input = message.text.strip()
    steam_id32 = get_steam_id32(user_input)

    if steam_id32 is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SteamID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        player_data = requests.get(f"https://api.opendota.com/api/players/{steam_id32}").json()

        if 'profile' not in player_data:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å SteamID.")
            return

        web_app_btn = InlineKeyboardButton(
            text="üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            web_app=WebAppInfo(url=f"https://dota-stats-pi.vercel.app/?steamid={steam_id32}")
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[web_app_btn]])

        await message.answer(
            f"üéÆ <b>{player_data['profile']['personaname']}</b>\n"
            f"üèÜ MMR: <code>{player_data.get('mmr_estimate', {}).get('estimate', 'N/A')}</code>\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard
        )

    except Exception as e:
        await message.answer(f"üö® –û—à–∏–±–∫–∞: {str(e)}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())